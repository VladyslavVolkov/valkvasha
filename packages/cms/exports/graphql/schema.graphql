input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type EmailDesignerEmailTemplate {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
}

input EmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

input editEmailTemplateInput {
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  role: UsersPermissionsRole
  firstName: String
  lastName: String
  photo: UploadFile
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  role: [UsersPermissionsUserConnectionRole]
  firstName: [UsersPermissionsUserConnectionFirstName]
  lastName: [UsersPermissionsUserConnectionLastName]
  photo: [UsersPermissionsUserConnectionPhoto]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionPhoto {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  password: String
  email: String!
  provider: String
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  photo: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  password: String
  email: String
  provider: String
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  photo: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type CmsCategory {
  id: ID!
  name: String!
  slug: String!
  pages(sort: String, limit: Int, start: Int, where: JSON): [CmsPage]
  parent(sort: String, limit: Int, start: Int, where: JSON): [CmsCategory]
  children(sort: String, limit: Int, start: Int, where: JSON): [CmsCategory]
}

type CmsCategoryConnection {
  values: [CmsCategory]
  groupBy: CmsCategoryGroupBy
  aggregate: CmsCategoryAggregator
}

type CmsCategoryAggregator {
  count: Int
  totalCount: Int
}

type CmsCategoryGroupBy {
  id: [CmsCategoryConnectionId]
  name: [CmsCategoryConnectionName]
  slug: [CmsCategoryConnectionSlug]
}

type CmsCategoryConnectionId {
  key: ID
  connection: CmsCategoryConnection
}

type CmsCategoryConnectionName {
  key: String
  connection: CmsCategoryConnection
}

type CmsCategoryConnectionSlug {
  key: String
  connection: CmsCategoryConnection
}

input CategoryInput {
  name: String!
  pages: [ID]
  parent: [ID]
  children: [ID]
  slug: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  pages: [ID]
  parent: [ID]
  children: [ID]
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type CmsMeta {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  slug: String!
  title: String
  description: String
  keywords: String
}

type CmsMetaConnection {
  values: [CmsMeta]
  groupBy: CmsMetaGroupBy
  aggregate: CmsMetaAggregator
}

type CmsMetaAggregator {
  count: Int
  totalCount: Int
}

type CmsMetaGroupBy {
  id: [CmsMetaConnectionId]
  created_at: [CmsMetaConnectionCreated_at]
  updated_at: [CmsMetaConnectionUpdated_at]
  slug: [CmsMetaConnectionSlug]
  title: [CmsMetaConnectionTitle]
  description: [CmsMetaConnectionDescription]
  keywords: [CmsMetaConnectionKeywords]
}

type CmsMetaConnectionId {
  key: ID
  connection: CmsMetaConnection
}

type CmsMetaConnectionCreated_at {
  key: DateTime
  connection: CmsMetaConnection
}

type CmsMetaConnectionUpdated_at {
  key: DateTime
  connection: CmsMetaConnection
}

type CmsMetaConnectionSlug {
  key: String
  connection: CmsMetaConnection
}

type CmsMetaConnectionTitle {
  key: String
  connection: CmsMetaConnection
}

type CmsMetaConnectionDescription {
  key: String
  connection: CmsMetaConnection
}

type CmsMetaConnectionKeywords {
  key: String
  connection: CmsMetaConnection
}

input MetaInput {
  slug: String
  title: String
  description: String
  keywords: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editMetaInput {
  slug: String
  title: String
  description: String
  keywords: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type CmsPage {
  id: ID!
  name: String!
  text: String!
  slug: String!
  meta: ComponentOrganismsMeta
  cover(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  categories(sort: String, limit: Int, start: Int, where: JSON): [CmsCategory]
}

type CmsPageConnection {
  values: [CmsPage]
  groupBy: CmsPageGroupBy
  aggregate: CmsPageAggregator
}

type CmsPageAggregator {
  count: Int
  totalCount: Int
}

type CmsPageGroupBy {
  id: [CmsPageConnectionId]
  name: [CmsPageConnectionName]
  text: [CmsPageConnectionText]
  slug: [CmsPageConnectionSlug]
  meta: [CmsPageConnectionMeta]
}

type CmsPageConnectionId {
  key: ID
  connection: CmsPageConnection
}

type CmsPageConnectionName {
  key: String
  connection: CmsPageConnection
}

type CmsPageConnectionText {
  key: String
  connection: CmsPageConnection
}

type CmsPageConnectionSlug {
  key: String
  connection: CmsPageConnection
}

type CmsPageConnectionMeta {
  key: ID
  connection: CmsPageConnection
}

input PageInput {
  name: String!
  text: String!
  cover: [ID]
  slug: String!
  categories: [ID]
  meta: ComponentOrganismsMetaInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPageInput {
  name: String
  text: String
  cover: [ID]
  slug: String
  categories: [ID]
  meta: editComponentOrganismsMetaInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type CmsSection {
  id: ID!
  title: String!
  description: String
  slug: String!
  cards: [ComponentOrganismsCard]
  records: [ComponentMoleculesRecord]
  card: ComponentOrganismsCard
}

type CmsSectionConnection {
  values: [CmsSection]
  groupBy: CmsSectionGroupBy
  aggregate: CmsSectionAggregator
}

type CmsSectionAggregator {
  count: Int
  totalCount: Int
}

type CmsSectionGroupBy {
  id: [CmsSectionConnectionId]
  title: [CmsSectionConnectionTitle]
  description: [CmsSectionConnectionDescription]
  slug: [CmsSectionConnectionSlug]
}

type CmsSectionConnectionId {
  key: ID
  connection: CmsSectionConnection
}

type CmsSectionConnectionTitle {
  key: String
  connection: CmsSectionConnection
}

type CmsSectionConnectionDescription {
  key: String
  connection: CmsSectionConnection
}

type CmsSectionConnectionSlug {
  key: String
  connection: CmsSectionConnection
}

input SectionInput {
  title: String
  description: String
  slug: String!
  cards: [ComponentOrganismsCardInput]
  records: [ComponentMoleculesRecordInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSectionInput {
  title: String
  description: String
  slug: String
  cards: [editComponentOrganismsCardInput]
  records: [editComponentMoleculesRecordInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type CmsWebsite {
  id: ID!
  name: String
  slug: String!
  logo: UploadFile
  googleAnalyticsCode: String
  googleTagManagerCode: String
  menu: [ComponentMoleculesMenu]
}

input WebsiteInput {
  name: String
  slug: String!
  logo: ID
  googleAnalyticsCode: String
  googleTagManagerCode: String
  menu: [ComponentMoleculesMenuInput]
  created_by: ID
  updated_by: ID
}

input editWebsiteInput {
  name: String
  slug: String
  logo: ID
  googleAnalyticsCode: String
  googleTagManagerCode: String
  menu: [editComponentMoleculesMenuInput]
  created_by: ID
  updated_by: ID
}

type FeedbackContact {
  id: ID!
  email: String!
  name: String!
  subject: String
  message: String
}

input ContactInput {
  email: String!
  name: String!
  subject: String
  message: String
  created_by: ID
  updated_by: ID
}

input editContactInput {
  email: String
  name: String
  subject: String
  message: String
  created_by: ID
  updated_by: ID
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: FeedbackContact
}

"""Key-Value entry"""
type ComponentAtomsEntry {
  id: ID!
  key: String!
  value: String
}

input ComponentAtomsEntryInput {
  key: String!
  value: String
}

input editComponentAtomsEntryInput {
  id: ID
  key: String
  value: String
}

type ComponentAtomsLink {
  id: ID!
  text: String
  url: String!
  extra: String
}

input ComponentAtomsLinkInput {
  text: String
  url: String!
  extra: String
}

input editComponentAtomsLinkInput {
  id: ID
  text: String
  url: String
  extra: String
}

type ComponentAtomsNumeric {
  id: ID!
  value: Float!
  unit: String
  min: Float!
  max: Float!
}

input ComponentAtomsNumericInput {
  value: Float!
  unit: String
  min: Float
  max: Float
}

input editComponentAtomsNumericInput {
  id: ID
  value: Float
  unit: String
  min: Float
  max: Float
}

"""Text node"""
type ComponentAtomsText {
  id: ID!
  value: String!
}

input ComponentAtomsTextInput {
  value: String!
}

input editComponentAtomsTextInput {
  id: ID
  value: String
}

type ComponentMoleculesMenu {
  id: ID!
  links: [ComponentAtomsLink]
  slug: String!
}

input ComponentMoleculesMenuInput {
  links: [ComponentAtomsLinkInput]
  slug: String
}

input editComponentMoleculesMenuInput {
  id: ID
  links: [editComponentAtomsLinkInput]
  slug: String
}

type ComponentMoleculesRecord {
  id: ID!
  entries: [ComponentAtomsEntry]
  slug: String!
}

input ComponentMoleculesRecordInput {
  entries: [ComponentAtomsEntryInput!]
  slug: String
}

input editComponentMoleculesRecordInput {
  id: ID
  entries: [editComponentAtomsEntryInput]
  slug: String
}

type ComponentOrganismsCard {
  id: ID!
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: UploadFile
  active: Boolean
  backgroundColor: String
  link: ComponentAtomsLink
  slug: String
}

input ComponentOrganismsCardInput {
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: ID
  active: Boolean
  backgroundColor: String
  link: ComponentAtomsLinkInput
  slug: String
}

input editComponentOrganismsCardInput {
  id: ID
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: ID
  active: Boolean
  backgroundColor: String
  link: editComponentAtomsLinkInput
  slug: String
}

type ComponentOrganismsMeta {
  id: ID!
  title: String
  description: String
  keywords: [ComponentAtomsText]
}

input ComponentOrganismsMetaInput {
  title: String
  description: String
  keywords: [ComponentAtomsTextInput]
}

input editComponentOrganismsMetaInput {
  id: ID
  title: String
  description: String
  keywords: [editComponentAtomsTextInput]
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | EmailDesignerEmailTemplate | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | UsersPermissionsUserConnectionPhoto | createUserPayload | updateUserPayload | deleteUserPayload | CmsCategory | CmsCategoryConnection | CmsCategoryAggregator | CmsCategoryGroupBy | CmsCategoryConnectionId | CmsCategoryConnectionName | CmsCategoryConnectionSlug | CmsMeta | CmsMetaConnection | CmsMetaAggregator | CmsMetaGroupBy | CmsMetaConnectionId | CmsMetaConnectionCreated_at | CmsMetaConnectionUpdated_at | CmsMetaConnectionSlug | CmsMetaConnectionTitle | CmsMetaConnectionDescription | CmsMetaConnectionKeywords | CmsPage | CmsPageConnection | CmsPageAggregator | CmsPageGroupBy | CmsPageConnectionId | CmsPageConnectionName | CmsPageConnectionText | CmsPageConnectionSlug | CmsPageConnectionMeta | CmsSection | CmsSectionConnection | CmsSectionAggregator | CmsSectionGroupBy | CmsSectionConnectionId | CmsSectionConnectionTitle | CmsSectionConnectionDescription | CmsSectionConnectionSlug | CmsWebsite | FeedbackContact | createContactPayload | ComponentAtomsEntry | ComponentAtomsLink | ComponentAtomsNumeric | ComponentAtomsText | ComponentMoleculesMenu | ComponentMoleculesRecord | ComponentOrganismsCard | ComponentOrganismsMeta

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  category(id: ID!, publicationState: PublicationState): CmsCategory
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CmsCategory]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CmsCategoryConnection
  meta(id: ID!, publicationState: PublicationState): CmsMeta
  metas(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CmsMeta]
  metasConnection(sort: String, limit: Int, start: Int, where: JSON): CmsMetaConnection
  page(id: ID!, publicationState: PublicationState): CmsPage
  pages(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CmsPage]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): CmsPageConnection
  section(id: ID!, publicationState: PublicationState): CmsSection
  sections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [CmsSection]
  sectionsConnection(sort: String, limit: Int, start: Int, where: JSON): CmsSectionConnection
  website(id: ID!, publicationState: PublicationState): CmsWebsite
  me: UsersPermissionsMe
}

type Mutation {
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  createContact(input: createContactInput): createContactPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
